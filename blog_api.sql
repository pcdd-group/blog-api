/*
 Navicat Premium Data Transfer

 Source Server         : aliyun_mysql8
 Source Server Type    : MySQL
 Source Server Version : 80018
 Source Host           : rm-bp1k55jgi0iuet22e2o.mysql.rds.aliyuncs.com:3306
 Source Schema         : blog_api

 Target Server Type    : MySQL
 Target Server Version : 80018
 File Encoding         : 65001

 Date: 10/05/2021 22:49:38
*/

SET NAMES utf8mb4;
SET FOREIGN_KEY_CHECKS = 0;

-- ----------------------------
-- Table structure for login_log
-- ----------------------------
DROP TABLE IF EXISTS `login_log`;
CREATE TABLE `login_log`  (
  `id` bigint(20) UNSIGNED NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NOT NULL,
  `login_datetime` datetime(0) NOT NULL,
  `ip_addr` char(15) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `browser` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `engine` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `os` varchar(100) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `is_mobile` tinyint(4) NOT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `FK_userId`(`user_id`) USING BTREE,
  CONSTRAINT `FK_userId` FOREIGN KEY (`user_id`) REFERENCES `m_user` (`id`) ON DELETE RESTRICT ON UPDATE RESTRICT
) ENGINE = InnoDB AUTO_INCREMENT = 85 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of login_log
-- ----------------------------
INSERT INTO `login_log` VALUES (16, 148, '2021-04-14 20:35:52', '39.144.29.118', 'Chrome/89.0.4389.114', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (17, 148, '2021-04-14 20:37:01', '39.144.29.118', 'Chrome/89.0.4389.114', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (18, 148, '2021-04-14 20:37:19', '39.144.29.118', 'Chrome/89.0.4389.114', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (19, 148, '2021-04-14 20:43:58', '39.144.29.118', 'Chrome/89.0.4389.114', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (21, 148, '2021-04-14 20:53:57', '39.144.29.118', 'Chrome/89.0.4389.114', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (22, 1, '2021-04-14 20:56:41', '39.144.29.118', 'Chrome/89.0.4389.114', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (23, 1, '2021-04-15 04:59:37', '0:0:0:0:0:0:0:1', 'Chrome/89.0.4389.114', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (24, 148, '2021-04-14 21:40:06', '39.144.29.118', 'Safari/null', 'Webkit/605.1.15', 'iPhone', 1);
INSERT INTO `login_log` VALUES (25, 1, '2021-04-16 03:47:23', '39.144.27.65', 'Chrome/90.0.4430.72', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (28, 1, '2021-04-16 16:46:58', '123.54.37.5', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (29, 1, '2021-04-16 16:50:28', '123.54.37.5', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (30, 1, '2021-04-16 16:51:19', '123.54.37.5', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (31, 1, '2021-04-16 16:51:52', '123.54.37.5', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (32, 1, '2021-04-18 09:25:29', '42.238.177.16', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (33, 1, '2021-04-18 09:42:58', '42.238.177.16', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (34, 1, '2021-04-20 15:31:06', '123.54.37.56', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (35, 152, '2021-04-25 04:03:36', '106.42.183.252', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (36, 153, '2021-04-25 05:28:24', '106.42.183.252', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (37, 156, '2021-04-25 05:31:36', '106.42.183.252', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (38, 156, '2021-04-25 05:45:07', '106.42.183.252', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (39, 156, '2021-04-25 05:47:47', '106.42.183.252', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (40, 156, '2021-04-25 13:13:24', '171.14.26.86', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (41, 156, '2021-04-25 13:17:56', '171.14.26.86', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (42, 157, '2021-04-25 14:19:53', '171.14.26.86', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (43, 156, '2021-04-25 14:25:00', '171.14.26.86', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (44, 157, '2021-04-25 14:26:01', '171.14.26.86', 'Unknown/null', 'Unknown/null', 'Unknown', 0);
INSERT INTO `login_log` VALUES (45, 158, '2021-04-26 09:46:16', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (46, 158, '2021-04-26 09:47:20', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (47, 158, '2021-04-26 09:54:52', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (48, 158, '2021-04-26 09:57:51', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (49, 1, '2021-04-26 10:13:40', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (50, 159, '2021-04-26 14:33:55', '39.144.27.59', 'Chrome/90.0.4430.85', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (51, 159, '2021-04-26 14:37:24', '39.144.27.59', 'Chrome/90.0.4430.85', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (52, 158, '2021-04-26 14:38:33', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (53, 158, '2021-04-26 14:39:04', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (54, 158, '2021-04-26 14:42:07', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (55, 157, '2021-04-26 14:42:22', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (56, 157, '2021-04-26 14:42:41', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (57, 157, '2021-04-26 14:43:42', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (58, 158, '2021-04-26 14:46:42', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (59, 158, '2021-04-26 14:47:29', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (60, 158, '2021-04-26 14:48:26', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (61, 158, '2021-04-26 14:49:15', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (62, 158, '2021-04-26 14:50:33', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (63, 1, '2021-04-26 14:54:07', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (64, 156, '2021-04-26 15:01:42', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (65, 155, '2021-04-26 15:04:44', '171.14.26.29', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (66, 1, '2021-04-27 09:54:15', '39.144.27.146', 'Chrome/90.0.4430.85', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (67, 1, '2021-04-27 09:54:58', '39.144.27.146', 'Chrome/90.0.4430.85', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (68, 156, '2021-04-27 20:22:07', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (69, 157, '2021-04-27 20:28:45', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (70, 158, '2021-04-27 20:31:01', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (71, 155, '2021-04-27 20:41:05', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (72, 155, '2021-04-27 22:08:41', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (73, 155, '2021-04-27 22:11:07', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (74, 155, '2021-04-27 22:20:16', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (75, 155, '2021-04-27 22:27:27', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (76, 155, '2021-04-27 22:29:43', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (77, 154, '2021-04-27 22:34:13', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (78, 154, '2021-04-27 22:51:04', '106.42.182.143', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (79, 1, '2021-04-29 22:55:43', '39.144.27.230', 'Chrome/90.0.4430.85', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (80, 1, '2021-05-06 13:03:18', '39.144.27.110', 'Safari/11.0', 'Webkit/604.1.38', 'iPhone', 1);
INSERT INTO `login_log` VALUES (81, 1, '2021-05-06 22:32:37', '39.144.27.110', 'Chrome/90.0.4430.85', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (82, 155, '2021-05-07 22:05:54', '171.14.27.118', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (83, 130, '2021-05-07 22:08:25', '171.14.27.118', 'Chrome/89.0.4389.90', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);
INSERT INTO `login_log` VALUES (84, 1, '2021-05-10 15:23:09', '211.142.141.242', 'Chrome/90.0.4430.85', 'Webkit/537.36', 'Windows 10 or Windows Server 2016', 0);

-- ----------------------------
-- Table structure for m_blog
-- ----------------------------
DROP TABLE IF EXISTS `m_blog`;
CREATE TABLE `m_blog`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `user_id` bigint(20) NOT NULL,
  `title` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `description` varchar(255) CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `content` longtext CHARACTER SET utf8mb4 COLLATE utf8mb4_0900_ai_ci NOT NULL,
  `created` datetime(0) NOT NULL ON UPDATE CURRENT_TIMESTAMP(0),
  `status` tinyint(4) NULL DEFAULT 1,
  PRIMARY KEY (`id`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 198 CHARACTER SET = utf8mb4 COLLATE = utf8mb4_0900_ai_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of m_blog
-- ----------------------------
INSERT INTO `m_blog` VALUES (1, 1, '测试标题1', '测试摘要', 'JAVA诞生时，号称有三大颠覆性创新。即跨平台性，前后端分离，面向对象。但面向对象这个概念，真正火起来，却是因为微软，或者说是因为C#。\r\n因为在JAVA诞生的那个年代。。。。IT行业==微软。。。Unix挂掉了。。Linux已经被打成了残废。。。苹果只是个笑话。。。。其他如Amiga，PALM等公司更是渺小的几乎看不见。。\r\n当时的网页前端语言，是VBscript，微软的；当时的网站后端语言是ASP，微软的；当时的桌面应用程序开发语言是VB，还是微软的。原本，微软可以就这么一直无敌，一直寂寞下去。。。\r\n后来JAVA诞生了。。。像路边的一坨翔一样诞生了。\r\nSUN公司号称它具有颠覆性的三大特性。。。没人在意。。。\r\nSUN公司号称JAVA将改变未来。。。。没人相信。。。\r\n但是，微软在意，并深信不疑。。。于是一个奇妙的现象产生了。。。全世界的程序员，都在研究VB，但微软的程序员却在研究JAVA。。。全世界都是VB的铁杆粉，而微软的工程师们，眼里却只有JAVA。。而当时世界上的JAVA顶尖高手，绝大部分都在微软工作。。甚至可以说，微软对于JAVA的理解，比Sun公司更透彻。\r\n所以微软顺理成章的，进行了一个作死的计划。。。停止VB和ASP的开发。。。转而开发一个比JAVA平台更优秀的“微软版JAVA平台”——.NET。。。以及一门拥有JAVA语言全部特性，又比JAVA更优雅的“微软版JAVA语言”——C#语言。\r\n一个垄断着WEB前端的霸主（VBSCRIPT），一个垄断后端的霸主（ASP），突然一下子都不见了。。。。就好像天上的太阳和月亮突然一下子消失了。。。。那些原本被吊打的半死不活的语言，就像吃了大力丸一样，全都满血复活了。。。JAVASCRIPT取代了VBSCRIPT垄断了WEB前端。。。。。C语言也顺势变身成C++迎来了第二春。。。JAVA更是左右逢源，乐开了花。。。\r\n后来.NET平台终于开发完成了，但发现大部分市场已经被之前那些阿猫阿狗抢了去。。。只好回收一下ASP的那群老粉丝吧。。。。但ASP是直接把代码写在html文件里的，突然搞成了前后端分离，又面向对象啥的。。。那些用惯了ASP的用户适应不了哇。。。屋漏偏逢连夜雨，这时候，一个山寨版的ASP——PHP又冒出来挖人。。。最终搞得微软引以为傲的.NET平台，以及那优雅的C#语言，贴了冷屁股。。。\r\n微软也从一个绝对的霸主，跌落成了三巨头之一。。。。。', '2021-03-07 19:49:37', 1);
INSERT INTO `m_blog` VALUES (2, 1, '测试标题2', '测试摘要', '背景\r\n最近用到前端压缩图片的技术，虽说可以参考原理自己写，但是前辈花了很大精力写出来的插件可以帮助我们避免很多坑，直接拿来用吧。\r\n\r\n插件1 compression.js\r\n优点：使用简单，参数只有输入图片，压缩比例，输出图片。很少的代码量即可实现压缩和预览的效果。', '2021-03-07 19:49:39', 1);
INSERT INTO `m_blog` VALUES (7, 1, '测试标题4', '测试摘要', '在JavaScript中想让一个函数执行完毕之后再执行下一个函数？\n\n小蚍蜉要撼树 2017-06-19 09:03:37  52489  已收藏 3\n分类专栏： 前端知识 文章标签： javascript 异步\n版权\n先说结论：\n\n首先，JavaScript是解释性语言，本来就是顺序执行的！！\n\n所以，如果发现有一段js代码总是在一段代码之前就执行完了，比如说报了null异常，那么有可能是回调函数的异步机制造成的。\n\n此种情形下解决的方法是，把要执行的函数放在回调函数内部就可以了。\n\n举个栗子\n\n例如用JQuery Ajax 的 $.getJSON 方法：\r\n————————————————\r\n版权声明：本文为CSDN博主「小蚍蜉要撼树」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。\r\n原文链接：https://blog.csdn.net/qq_23067521/article/details/73456647', '2021-03-07 19:49:42', 1);
INSERT INTO `m_blog` VALUES (10, 1, 'vbscript', '计算机编程语言', 'VBScript是Visual Basic Script的简称，即 Visual Basic 脚本语言，有时也被缩写为VBS。它是一种微软环境下的轻量级的解释型语言，它使用COM组件、WMI、WSH、ADSI访问系统中的元素，对系统进行管理。同时它又是asp动态网页默认的编程语言，配合asp内建对象和ADO对象，用户很快就能掌握访问数据库的asp动态网页开发技术。', '2021-03-07 19:49:24', 1);
INSERT INTO `m_blog` VALUES (21, 130, 'typescript', '计算机编程语言', 'TypeScript是微软开发的一个开源的编程语言，通过在JavaScript的基础上添加静态类型定义构建而成。TypeScript通过TypeScript编译器或Babel转译为JavaScript代码，可运行在任何浏览器，任何操作系统。 [1] \r\nTypeScript添加了很多尚未正式发布的ECMAScript新特性（如装饰器 [2]  ）。2012年10月，微软发布了首个公开版本的TypeScript，2013年6月19日，在经历了一个预览版之后微软正式发布了正式版TypeScript。当前最新版本为TypeScript 4.0 [3-4]  。', '2021-03-22 19:51:55', 1);
INSERT INTO `m_blog` VALUES (31, 130, 'java2', '计算机编程语言', 'Java是一门面向对象编程语言，不仅吸收了C++语言的各种优点，还摒弃了C++里难以理解的多继承、指针等概念，因此Java语言具有功能强大和简单易用两个特征。Java语言作为静态面向对象编程语言的代表，极好地实现了面向对象理论，允许程序员以优雅的思维方式进行复杂的编程 [1]  。\r\nJava具有简单性、面向对象、分布式、健壮性、安全性、平台独立与可移植性、多线程、动态性等特点 [2]  。Java可以编写桌面应用程序、Web应用程序、分布式系统和嵌入式系统应用程序等 [3]  。', '2021-03-23 00:38:11', 1);
INSERT INTO `m_blog` VALUES (32, 130, 'c#', '计算机编程语言', 'C#是微软公司发布的一种由C和C++衍生出来的面向对象的编程语言、运行于.NET Framework和.NET Core(完全开源，跨平台)之上的高级程序设计语言。并定于在微软职业开发者论坛(PDC)上登台亮相。C#是微软公司研究员Anders Hejlsberg的最新成果。C#看起来与Java有着惊人的相似；它包括了诸如单一继承、接口、与Java几乎同样的语法和编译成中间代码再运行的过程。但是C#与Java有着明显的不同，它借鉴了Delphi的一个特点，与COM（组件对象模型）是直接集成的，而且它是微软公司 .NET windows网络框架的主角。\r\nC#是由C和C++衍生出来的一种安全的、稳定的、简单的、优雅的面向对象编程语言。它在继承C和C++强大功能的同时去掉了一些它们的复杂特性（例如没有宏以及不允许多重继承）。C#综合了VB简单的可视化操作和C++的高运行效率，以其强大的操作能力、优雅的语法风格、创新的语言特性和便捷的面向组件编程的支持成为.NET开发的首选语言。 [1] \r\nC#是面向对象的编程语言。它使得程序员可以快速地编写各种基于MICROSOFT .NET平台的应用程序，MICROSOFT .NET提供了一系列的工具和服务来最大程度地开发利用计算与通讯领域。\r\nC#使得C++程序员可以高效的开发程序，且因可调用由 C/C++ 编写的本机原生函数，而绝不损失C/C++原有的强大的功能。因为这种继承关系，C#与C/C++具有极大的相似性，熟悉类似语言的开发者可以很快的转向C#。', '2021-03-22 19:51:52', 1);
INSERT INTO `m_blog` VALUES (35, 130, 'emscript6', '计算机编程语言', 'ECMAScript 6（简称ES6）是于2015年6月正式发布的JavaScript语言的标准，正式名为ECMAScript 2015（ES2015）。它的目标是使得JavaScript语言可以用来编写复杂的大型应用程序，成为企业级开发语言 [1]  。\r\n另外，一些情况下ES6也泛指ES2015及之后的新增特性，虽然之后的版本应当称为ES7、ES8等。', '2021-03-22 19:51:51', 1);
INSERT INTO `m_blog` VALUES (36, 130, 'Docker 真滴牛！ 哈哈哈哈哈哈哈哈哈哈', '容器技术 666', '# Docker安装\r\n**yum包更新到最新**\r\nyum -y update\r\n\r\n**安装需要的软件包，yum-util提供yum-config-manager功能，另外两个是devicemapper驱动依赖**\r\n```bash\r\nyum install -y yum-utils device-mapper-persistent-data lvm2\r\n```\r\n\r\n**设置yum源**\r\n\r\n```bash\r\nyum-config-manager --add-repo http://mirrors.aliyun.com/dockerce/linux/centos/docker-ce.repo--\r\n```\r\n\r\n**安装docker，出现输入的界面都按y**\r\n\r\n```bash\r\nyum install -y docker-ce docker-ce-cli containerd.io\r\n```\r\n\r\n**查看docker版本，验证是否安装成功**\r\n\r\n```bash\r\ndocker -v\r\n```\r\n\r\n**需要先启动docker才会创建/etc/docker/目录**\r\n\r\n```bash\r\nsystemctl start docker\r\n```\r\n\r\n**修改下载源，否则pull速度很慢**\r\ndaemon.json这个文件默认是没有的，需要手动创建，路径： /etc/docker/daemon.json\r\n\r\n```\r\n{\r\n    \"registry-mirrors\": [\r\n       \"https://registry.docker-cn.com\"\r\n    ]\r\n}\r\n```\r\n\r\n**然后再执行以下命令让改动生效**\r\n\r\n```bash\r\nsystemctl daemon-reload\r\nsystemctl restart docker\r\n```\r\n\r\n\r\n\r\n# Docker镜像相关命令\r\n\r\n```bash\r\n查看本地所有的镜像\r\ndocker images\r\n查看所有镜像的id\r\ndocker images -q\r\n从网络中查找所需要的镜像\r\ndocker search 镜像名称\r\n拉取镜像\r\ndocker pull 镜像名称:版本\r\n删除指定本地镜像\r\ndocker rmi 镜像id\r\n删除所有本地镜像\r\ndocker rmi docker images -q\r\n```\r\n\r\n\r\n\r\n# Docker容器命令\r\n\r\n```bash\r\n创建容器（交互式容器）,并进入命令行，一旦退出命令行容器就关闭了\r\ndocker run -it --name 容器名 镜像名:版本  bash\r\n#创建容器（守护式容器）,后台运行,[]为可选，重启docker时，自动启动相关容器。\r\ndocker run -id --name 容器名 镜像名:版本 [--restart always]\r\n#启动容器\r\ndocker start 容器名\r\n#停止容器\r\ndocker stop 容器名 \r\n#删除容器（先停止运行才行）\r\ndocker rm 容器名|容器id\r\n#删除所有容器\r\ndocker rm `docker ps -aq`\r\n#进入某个运行的容器的命令行（退出不会关闭容器）\r\ndocker exec -it 容器名 bash\r\n#列出运行中的容器\r\ndocker ps\r\n#列出所有容器\r\ndocker ps -a\r\n#查看容器信息\r\ndocker inspect 容器名\r\n#实时日志 最新100条，实时更新\r\ndocker logs -f --tail=100 容器名\r\n\r\n#在启动时如果没有添加这个参数怎么办呢，比如某个容器在启动的时候是没有添加–restart=always参数的，针对这种情况我们可以使用命令进行修改。\r\ndocker container update --restart=always 容器名字\r\n\r\ndocker 支持的restart策略\r\nno - 容器退出时不要自动重启，这个是默认值\r\non-failure 在容器非正常退出时（退出状态非0），才会重启容器\r\non-failure[:max-retries] 当容器非正常退出超过设定的次数才会重启\r\nalways 不管退出状态码是什么，始终重启容器，当指定always时，docker daemon将无数次的重启容器，容器也会在daemon启动时尝试重启，不管容器的状态如何。\r\nnuless-stopped 在容器退出时，总是重启，但不考虑在docker守护进程启动之时，就已经停止了的容器，\r\n\r\n\r\n```\r\n\r\n\r\n\r\n# Docker容器数据卷\r\n\r\n```bash\r\n创建容器时挂载数据卷（让容器和外部宿主机进行数据传递）\r\ndocker run -it --name 容器名 -v 宿主机指定目录的绝对路径:容器指定目录的绝对路径 镜像名 \r\n\r\n一个容器挂载多个目录（~相当于/root）\r\ndocker run -it --name 容器名 -v ~/data2:/root/data2 -v ~/data3:/root/data3 镜像名 \r\n\r\n创建数据卷容器（创建一个容器，挂载一个目录，让其他容器继承该容器）\r\ndocker run -it --name 容器名 -v /volume 镜像名 \r\n容器挂载到数据卷容器\r\ndocker run -it --name 容器名 --volumes-from 数据卷容器名 centos:centos7.9.2009 \r\n\r\n如果想把某个项目及其依赖的运行环境打包，可以使用如下命令\r\n下面这些命令不常用，一般都是通过Dockerfile的形式来完成，见后文\r\ndocker 容器转镜像\r\ndocker commit 容器id 镜像名:版本号\r\ndocker镜像转压缩文件\r\ndocker save -o  压缩文件名（例如xxx.tar）镜像名:版本号\r\n将文件转docker镜像\r\ndocker load -i 压缩文件名\r\n\r\n下面两个命令比较重要\r\n\r\n将nginx容器中的nginx.conf拷贝到/server/nginx/conf目录中:\r\ndocker cp 容器名:/etc/nginx/nginx.conf /server/nginx/conf/\r\n\r\n将宿主机的文件拷贝到容器中\r\ndocker cp 宿主机文件路径 容器名:容器文件路径 \r\n```\r\n\r\n\r\n\r\n# Dockerfile \r\n\r\n```bash\r\nSpringBoot项目部署\r\n\r\n编写Dockerfile文件\r\n将Dockerfile和jar包放在同一目录下\r\n在此目录执行如下命令：\r\n\r\ndocker build -t 镜像名:版本 .\r\ndocker run -id --name=容器名 -p 8083:8181 镜像名:版本\r\n\r\n\r\n```\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n# docker-compose 安装\r\n\r\n```bash\r\n1 curl -L https://github.com/docker/compose/releases/download/1.24.1/docker-compose-`uname -s`-`uname -m` -o /usr/local/bin/docker-compose\r\n\r\n2 chmod +x /usr/local/bin/docker-compose\r\n\r\n3 docker-compose -v\r\n\r\n命令介绍：\r\ndocker-compose up //启动yml文件定义的 container\r\ndocker-compose up -d //后台运行\r\ndocker-compose up --help //查看up帮助\r\ndocker-compose -f docker-compose.yml up //-f 指定yml文件\r\ndocker-compose stop //停止\r\ndocker-compose start \r\ndocker-compose ls  //查看\r\ndocker-compose down //停止删除\r\ndocker-compose ps\r\ndocker-compose images\r\ndocker-compose exec {service_name} {bash}\r\n```\r\n\r\n\r\n\r\n# Portainer 安装与配置\r\n\r\n [Portainer](https://www.portainer.io/) 是一个开源、轻量级Docker管理用户界面，基于Docker API，提供状态显示面板、应用模板快速部署、容器镜像网络数据卷的基本操作（包括上传下载镜像，创建容器等操作）、事件日志显示、容器控制台操作、Swarm集群和服务等集中管理和操作、登录用户管理和控制等功能。功能十分全面，基本能满足中小型单位对容器管理的全部需求。\r\n\r\n```bash\r\n# 搜索镜像 \r\ndocker search portainer/portainer \r\n\r\n# 拉取镜像 \r\ndocker pull portainer/portainer \r\n\r\n# 运行镜像 密码长度必须大于8位，否则报错\r\ndocker run --name portainer \\\r\n--env ADMIN_USERNAME=你的8位密码 \\\r\n--env ADMIN_PASS=root -d -p 9000:9000 \\\r\n-v /root/portainer:/data \\\r\n-v /var/run/docker.sock:/var/run/docker.sock \\\r\n-v /public:/public  \\\r\nportainer/portainer\r\n```\r\n\r\n注意： 在启动容器时必须挂载本地 /var/run/docker.socker与容器内的/var/run/docker.socker连接。\r\n\r\n如果需要汉化，可以下载[汉化包](https://pan.baidu.com/s/1BLXMSmJFcgESeNMhQL26Mg&shfl=sharepset)（提取码：6vjr），之后解压，并将解压后的public文件夹上传到centos系统的根目录下，如下图所示：\r\n\r\n\r\n\r\n\r\n\r\n', '2021-03-22 19:51:49', 0);
INSERT INTO `m_blog` VALUES (130, 130, 'javascript', '计算机编程语言', 'JavaScript（简称“JS”） 是一种具有函数优先的轻量级，解释型或即时编译型的编程语言。虽然它是作为开发Web页面的脚本语言而出名，但是它也被用到了很多非浏览器环境中，JavaScript 基于原型编程、多范式的动态脚本语言，并且支持面向对象、命令式和声明式（如函数式编程）风格。 [1] \r\nJavaScript在1995年由Netscape公司的Brendan Eich，在网景导航者浏览器上首次设计实现而成。因为Netscape与Sun合作，Netscape管理层希望它外观看起来像Java，因此取名为JavaScript。但实际上它的语法风格与Self及Scheme较为接近。 [2] \r\nJavaScript的标准是ECMAScript 。截至 2012 年，所有浏览器都完整的支持ECMAScript 5.1，旧版本的浏览器至少支持ECMAScript 3 标准。2015年6月17日，ECMA国际组织发布了ECMAScript的第六版，该版本正式名称为 ECMAScript 2015，但通常被称为ECMAScript 6 或者ES2015。 [1]', '2021-03-22 19:51:50', 1);
INSERT INTO `m_blog` VALUES (148, 1, '123标题', '123描述', '![qjl.png](1)\n\n123', '2021-05-06 19:45:59', 1);
INSERT INTO `m_blog` VALUES (168, 154, '2021428', '随笔', '首页\n下载APP\naxios中文文档\n\ncool_cl\naxios中文文档\n\ncool_cl\n13\n2018.02.16 10:22:33\n字数 855\n阅读 491,419\n原文地址：lewis1990@amoy\n\naxios\n基于promise用于浏览器和node.js的http客户端\n\n特点\n支持浏览器和node.js\n支持promise\n能拦截请求和响应\n能转换请求和响应数据\n能取消请求\n自动转换JSON数据\n浏览器端支持防止CSRF(跨站请求伪造)\n安装\nnpm安装\n\n$ npm install axios\nbower安装\n\n$ bower install axios\n通过cdn引入\n\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n例子\n发起一个GET请求\n\n// Make a request for a user with a given ID\naxios.get(\'/user?ID=12345\')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n// Optionally the request above could also be done as\naxios.get(\'/user\', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n发起一个POST请求\n\naxios.post(\'/user\', {\n    firstName: \'Fred\',\n    lastName: \'Flintstone\'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n同时发起多个请求\n\nfunction getUserAccount() {\n  return axios.get(\'/user/12345\');\n}\n\nfunction getUserPermissions() {\n  return axios.get(\'/user/12345/permissions\');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // Both requests are now complete\n  }));\naxios api\n可以通过导入相关配置发起请求\n\naxios(config)\n// 发起一个POST请求\naxios({\n  method: \'post\',\n  url: \'/user/12345\',\n  data: {\n    firstName: \'Fred\',\n    lastName: \'Flintstone\'\n  }\n});\n// 获取远程图片\naxios({\n  method:\'get\',\n  url:\'http://bit.ly/2mTM3nY\',\n  responseType:\'stream\'\n})\n  .then(function(response) {\n  response.data.pipe(fs.createWriteStream(\'ada_lovelace.jpg\'))\n});\naxios(url[, config])\n// 发起一个GET请求（GET是默认的请求方法）\naxios(\'/user/12345\');\n请求方法别名\n为了方便我们为所有支持的请求方法均提供了别名。\n\naxios.request(config)\naxios.get(url[, config])\naxios.delete(url[, config])\naxios.head(url[, config])\naxios.options(url[, config])\naxios.post(url[, data[, config]])\naxios.put(url[, data[, config]])\naxios.patch(url[, data[, config]])\n注释\n当使用以上别名方法时，url，method和data等属性不用在config重复声明。\n\n同时发生的请求\n一下两个用来处理同时发生多个请求的辅助函数\n\naxios.all(iterable)\naxios.spread(callback)\n创建一个实例\n你可以创建一个拥有通用配置的axios实例\n\naxios.creat([config])\nvar instance = axios.create({\n  baseURL: \'https://some-domain.com/api/\',\n  timeout: 1000,\n  headers: {\'X-Custom-Header\': \'foobar\'}\n});\n实例的方法\n以下是所有可用的实例方法，额外声明的配置将与实例配置合并\n\naxios#request(config)\naxios#get(url[, config])\naxios#delete(url[, config])\naxios#head(url[, config])\naxios#options(url[, config])\naxios#post(url[, data[, config]])\naxios#put(url[, data[, config]])\naxios#patch(url[, data[, config]])\n请求配置\n下面是所有可用的请求配置项，只有url是必填，默认的请求方法是GET，如果没有指定请求方法的话。\n\n{\n  // `url` 是请求的接口地址\n  url: \'/user\',\n\n  // `method` 是请求的方法\n  method: \'get\', // 默认值\n\n  // 如果url不是绝对路径，那么会将baseURL和url拼接作为请求的接口地址\n  // 用来区分不同环境，建议使用\n  baseURL: \'https://some-domain.com/api/\',\n\n  // 用于请求之前对请求数据进行操作\n  // 只用当请求方法为‘PUT’，‘POST’和‘PATCH’时可用\n  // 最后一个函数需return出相应数据\n  // 可以修改headers\n  transformRequest: [function (data, headers) {\n    // 可以对data做任何操作\n\n    return data;\n  }],\n\n  // 用于对相应数据进行处理\n  // 它会通过then或者catch\n  transformResponse: [function (data) {\n    // 可以对data做任何操作\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {\'X-Requested-With\': \'XMLHttpRequest\'},\n\n  // URL参数\n  // 必须是一个纯对象或者 URL参数对象\n  params: {\n    ID: 12345\n  },\n\n  // 是一个可选的函数负责序列化`params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: \'brackets\'})\n  },\n\n  // 请求体数据\n  // 只有当请求方法为\'PUT\', \'POST\',和\'PATCH\'时可用\n  // 当没有设置`transformRequest`时，必须是以下几种格式\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: \'Fred\'\n  },\n\n  // 请求超时时间（毫秒）\n  timeout: 1000,\n\n  // 是否携带cookie信息\n  withCredentials: false, // default\n\n  // 统一处理request让测试更加容易\n  // 返回一个promise并提供一个可用的response\n  // 其实我并不知道这个是干嘛的！！！！\n  // (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  auth: {\n    username: \'janedoe\',\n    password: \'s00pers3cret\'\n  },\n\n  // 响应格式\n  // 可选项 \'arraybuffer\', \'blob\', \'document\', \'json\', \'text\', \'stream\'\n  responseType: \'json\', // 默认值是json\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: \'XSRF-TOKEN\', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: \'X-XSRF-TOKEN\', // default\n\n  // 处理上传进度事件\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // 处理下载进度事件\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // 设置http响应内容的最大长度\n  maxContentLength: 2000,\n\n  // 定义可获得的http响应状态码\n  // return true、设置为null或者undefined，promise将resolved,否则将rejected\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  // 最大重定向次数？没用过不清楚\n  maxRedirects: 5, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // \'proxy\' defines the hostname and port of the proxy server\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  // 代理\n  proxy: {\n    host: \'127.0.0.1\',\n    port: 9000,\n    auth: {\n      username: \'mikeymike\',\n      password: \'rapunz3l\'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  // 用于取消请求？又是一个不知道怎么用的配置项\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n\n响应组成\nresponse由以下几部分信息组成\n\n{\n  // 服务端返回的数据\n  data: {},\n\n  // 服务端返回的状态码\n  status: 200,\n\n  // 服务端返回的状态信息\n  statusText: \'OK\',\n\n  // 响应头\n  // 所有的响应头名称都是小写\n  headers: {},\n\n  // axios请求配置\n  config: {},\n\n  // 请求\n  request: {}\n}    \n用then接收以下响应信息\n\naxios.get(\'/user/12345\')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n默认配置\n全局修改axios默认配置\naxios.defaults.baseURL = \'https://api.example.com\';\naxios.defaults.headers.common[\'Authorization\'] = AUTH_TOKEN;\naxios.defaults.headers.post[\'Content-Type\'] = \'application/x-www-form-urlencoded\';\n实例默认配置\n// 创建实例时修改配置\nvar instance = axios.create({\n  baseURL: \'https://api.example.com\'\n});\n\n// 实例创建之后修改配置\ninstance.defaults.headers.common[\'Authorization\'] = AUTH_TOKEN;\n配置优先级\n配置项通过一定的规则合并，request config > instance.defaults > 系统默认，优先级高的覆盖优先级低的。\n\n// 创建一个实例，这时的超时时间为系统默认的 0\nvar instance = axios.create();\n\n// 通过instance.defaults重新设置超时时间为2.5s，因为优先级比系统默认高\ninstance.defaults.timeout = 2500;\n\n// 通过request config重新设置超时时间为5s，因为优先级比instance.defaults和系统默认都高\ninstance.get(\'/longRequest\', {\n  timeout: 5000\n});\n拦截器\n你可以在then和catch之前拦截请求和响应。\n\n// 添加一个请求拦截器\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// 添加一个响应拦截器\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    return Promise.reject(error);\n  });\n如果之后想移除拦截器你可以这么做\n\nvar myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n你也可以为axios实例添加一个拦截器\n\nvar instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n错误处理\naxios.get(\'/user/12345\')\n  .catch(function (error) {\n    if (error.response) {\n      // 发送请求后，服务端返回的响应码不是 2xx   \n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // 发送请求但是没有响应返回\n      console.log(error.request);\n    } else {\n      // 其他错误\n      console.log(\'Error\', error.message);\n    }\n    console.log(error.config);\n  });\n你可以用validateStatus定义一个http状态码返回的范围.\n\naxios.get(\'/user/12345\', {\n  validateStatus: function (status) {\n    return status < 500; // Reject only if the status code is greater than or equal to 500\n  }\n})\n取消请求\n你可以通过cancel token来取消一个请求\n\nThe axios cancel token API is based on the withdrawn cancelable promises proposal.\n\nYou can create a cancel token using the CancelToken.source factory as shown below:\n\nvar CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\n\naxios.get(\'/user/12345\', {\n  cancelToken: source.token\n}).catch(function(thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log(\'Request canceled\', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\n// cancel the request (the message parameter is optional)\nsource.cancel(\'Operation canceled by the user.\');\nYou can also create a cancel token by passing an executor function to the CancelToken constructor:\n\nvar CancelToken = axios.CancelToken;\nvar cancel;\n\naxios.get(\'/user/12345\', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\nNote: you can cancel several requests with the same cancel token.\n\nUsing application/x-www-form-urlencoded format\nBy default, axios serializes JavaScript objects to JSON. To send data in the application/x-www-form-urlencoded format instead, you can use one of the following options.\n\nBrowser\nIn a browser, you can use the URLSearchParams API as follows:\n\nvar params = new URLSearchParams();\nparams.append(\'param1\', \'value1\');\nparams.append(\'param2\', \'value2\');\naxios.post(\'/foo\', params);\nNote that URLSearchParams is not supported by all browsers (see caniuse.com), but there is a polyfill available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the qs library:\n\nvar qs = require(\'qs\');\naxios.post(\'/foo\', qs.stringify({ \'bar\': 123 }));\nNode.js\nIn node.js, you can use the querystring module as follows:\n\nvar querystring = require(\'querystring\');\naxios.post(\'http://something.com/\', querystring.stringify({ foo: \'bar\' }));\nYou can also use the qs library.\n\nSemver\nUntil axios reaches a 1.0 release, breaking changes will be released with a new minor version. For example 0.5.1, and 0.5.4 will have the same API, but 0.6.0 will have breaking changes.\n\nPromises\naxios depends on a native ES6 Promise implementation to be supported.\nIf your environment doesn\'t support ES6 Promises, you can polyfill.\n\nTypeScript\naxios includes TypeScript definitions.\n\nimport axios from \'axios\';\naxios.get(\'/user?ID=12345\');\nResources\nChangelog\nUpgrade Guide\nEcosystem\nContributing Guide\nCode of Conduct\nCredits\naxios is heavily inspired by the $http service provided in Angular. Ultimately axios is an effort to provide a standalone $http-like service for use outside of Angular.\n\nLicense\nMIT\n\n更多精彩内容，就在简书APP\n\"小礼物走一走，来简书关注我\"\n还没有人赞赏，支持一下\n  \ncool_cl\nA Front-end developer passionate about coding a...\n总资产77 (约5.98元)共写了4516字获得417个赞共163个粉丝\n\n被以下专题收入，发现更多相似内容\n\nJS\n\nVue2.0\n\nvue-cli...\n\nAxios\n\n思科DevNet\n\nimportant\n\nRN\n推荐阅读\n更多精彩内容\nSpring Cloud\nSpring Cloud为开发人员提供了快速构建分布式系统中一些常见模式的工具（例如配置管理，服务发现，断路器，智...\n\n卡卡罗2017\n阅读 116,794\n评论 15\n赞 132\n\nAxios全攻略 nodejs 模块 ，用于请求后台数据\n时间2017-03-31 13:43:44Hope’s Blog 原文https://blog.ygxdxx.co...\n\n萧玄辞\n阅读 10,994\n评论 3\n赞 16\n\n原谅我，消失的能力\n已经很久很久没有触碰文字这个东西。自从心里产生了叛逆与恐怖的懒散后，就再也没有动过把自己的想法变成文字的想法。显然...\n\n木木子凉\n阅读 89\n评论 0\n赞 0\n20170818共读《沟通的艺术》d19\np263-272 原文1 借力使力，牵涉到使用沉默和简短的言论来鼓舞对方多说一些话，让对方借由这个过程自己协助自...\n\nkidII\n阅读 74\n评论 0\n赞 1\n夜湖\n小柏常常在半梦半醒中想到他，想到那片在黑夜里闪烁着无限神秘的湖。感觉他就像那片湖，包裹着她，吞噬着她。那种空洞的感...\n\n许诺鱼\n阅读 203\n评论 0\n赞 2\n\ncool_cl\n总资产77 (约5.98元)\n免费SSL证书升级全站HTTPS\n阅读 465\n2018年全栈开发个人博客技术选型\n阅读 1,513\n推荐阅读\nVue方向：axios的理解与简单使用\n阅读 360\nVue方向：axios全局拦截器以及配置的优先级\n阅读 437\n后台管理系统token存储问题\n阅读 733\naxios的基本使用\n阅读 182\n技术周报35-Axios的get和post请求方式\n阅读 86\n写下你的评论...\n', '2021-04-28 00:22:01', 1);
INSERT INTO `m_blog` VALUES (169, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:37', 1);
INSERT INTO `m_blog` VALUES (170, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:38', 1);
INSERT INTO `m_blog` VALUES (171, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:39', 1);
INSERT INTO `m_blog` VALUES (172, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:40', 1);
INSERT INTO `m_blog` VALUES (173, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:41', 1);
INSERT INTO `m_blog` VALUES (174, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:55', 1);
INSERT INTO `m_blog` VALUES (175, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:55', 1);
INSERT INTO `m_blog` VALUES (176, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:56', 1);
INSERT INTO `m_blog` VALUES (177, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:56', 1);
INSERT INTO `m_blog` VALUES (178, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:57', 1);
INSERT INTO `m_blog` VALUES (179, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:57', 1);
INSERT INTO `m_blog` VALUES (180, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:57', 1);
INSERT INTO `m_blog` VALUES (181, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:58', 1);
INSERT INTO `m_blog` VALUES (182, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:33:58', 1);
INSERT INTO `m_blog` VALUES (183, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:01', 1);
INSERT INTO `m_blog` VALUES (184, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:01', 1);
INSERT INTO `m_blog` VALUES (185, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:01', 1);
INSERT INTO `m_blog` VALUES (186, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:02', 1);
INSERT INTO `m_blog` VALUES (187, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:02', 1);
INSERT INTO `m_blog` VALUES (188, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:03', 1);
INSERT INTO `m_blog` VALUES (189, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:03', 1);
INSERT INTO `m_blog` VALUES (190, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:04', 1);
INSERT INTO `m_blog` VALUES (191, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:04', 1);
INSERT INTO `m_blog` VALUES (192, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:04', 1);
INSERT INTO `m_blog` VALUES (193, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:05', 1);
INSERT INTO `m_blog` VALUES (194, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:05', 1);
INSERT INTO `m_blog` VALUES (195, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:06', 1);
INSERT INTO `m_blog` VALUES (196, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:06', 1);
INSERT INTO `m_blog` VALUES (197, 1, '哔哩哔哩', '哔哩哔哩', '八零八零八哔哩哔哩', '2021-05-06 22:34:07', 1);

-- ----------------------------
-- Table structure for m_user
-- ----------------------------
DROP TABLE IF EXISTS `m_user`;
CREATE TABLE `m_user`  (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `username` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `avatar` varchar(255) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `email` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NULL DEFAULT NULL,
  `password` varchar(64) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL,
  `status` int(11) NOT NULL DEFAULT 1,
  `role` varchar(20) CHARACTER SET utf8 COLLATE utf8_general_ci NOT NULL DEFAULT 'user',
  `created` datetime(0) NULL DEFAULT NULL,
  `last_login` datetime(0) NULL DEFAULT NULL,
  PRIMARY KEY (`id`) USING BTREE,
  INDEX `UK_USERNAME`(`username`) USING BTREE
) ENGINE = InnoDB AUTO_INCREMENT = 160 CHARACTER SET = utf8 COLLATE = utf8_general_ci ROW_FORMAT = Dynamic;

-- ----------------------------
-- Records of m_user
-- ----------------------------
INSERT INTO `m_user` VALUES (1, 'admin', 'https://image-1300566513.cos.ap-guangzhou.myqcloud.com/upload/images/5a9f48118166308daba8b6da7e466aab.jpg', 'xxx@xx.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'admin', '2000-08-30 22:59:00', '2021-05-10 15:23:09');
INSERT INTO `m_user` VALUES (2, 'disable', '', '2', '0cfac8931b3ebec3fb6aec9636e33271', 0, 'user', '2021-02-23 20:58:02', '2021-02-23 20:58:06');
INSERT INTO `m_user` VALUES (3, 'ad', 'https://public-1300393241.cos.ap-beijing.myqcloud.com/qjl.png', '12345@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'admin', '2021-03-07 00:31:05', NULL);
INSERT INTO `m_user` VALUES (4, '工具人1号', NULL, NULL, '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2020-01-13 19:16:43', NULL);
INSERT INTO `m_user` VALUES (11, '小脑虎下山', NULL, 'xnhxs@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-03-07 19:23:00', NULL);
INSERT INTO `m_user` VALUES (123, 'user', NULL, 'xnhxs1@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-03-07 22:59:00', NULL);
INSERT INTO `m_user` VALUES (130, 'pcdd', 'https://ivueblog-1300393241.cos.ap-beijing.myqcloud.com/images/1___WbIEX9Hq-EI___1___.jpg', 'xxx@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'admin', '2021-03-13 19:16:34', '2021-05-07 22:08:25');
INSERT INTO `m_user` VALUES (146, '1', NULL, NULL, '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-03-21 03:33:19', '2021-04-15 04:21:32');
INSERT INTO `m_user` VALUES (147, 'scott', NULL, NULL, 'e7636b647e582a3e497286dce9334d01', 1, 'user', '2021-03-22 09:25:54', NULL);
INSERT INTO `m_user` VALUES (148, 'dpc', NULL, '666@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-14 20:35:22', '2021-04-14 21:40:06');
INSERT INTO `m_user` VALUES (149, 'qq', '', 'q2@qq.com', 'd502f7ac9822e414ec431586713e03d4', 1, 'user', '2021-04-16 13:53:49', NULL);
INSERT INTO `m_user` VALUES (150, 'qqq', '', 'qq2@qq.com', 'd502f7ac9822e414ec431586713e03d4', 1, 'user', '2021-04-18 09:22:09', NULL);
INSERT INTO `m_user` VALUES (151, 'qqqqq', NULL, 'qqqqq@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-18 09:30:55', NULL);
INSERT INTO `m_user` VALUES (152, 'test', NULL, '845667833@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-25 04:03:03', '2021-04-25 04:03:36');
INSERT INTO `m_user` VALUES (153, 'test2', NULL, 'test2@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-25 05:22:43', '2021-04-25 05:28:24');
INSERT INTO `m_user` VALUES (154, 'test3', NULL, 'test3@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-25 05:24:47', '2021-04-27 22:51:04');
INSERT INTO `m_user` VALUES (155, 'test4', NULL, 'test4@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-25 05:26:16', '2021-05-07 22:05:54');
INSERT INTO `m_user` VALUES (156, 'test5', NULL, 'test5@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-25 05:31:22', '2021-04-27 20:22:07');
INSERT INTO `m_user` VALUES (157, 'test6', NULL, 'test6@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-25 13:48:50', '2021-04-27 20:28:45');
INSERT INTO `m_user` VALUES (158, 'test7', NULL, 'test7@qq.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-26 09:46:06', '2021-04-27 20:31:01');
INSERT INTO `m_user` VALUES (159, '工具人100号', NULL, '1112@gmail.com', '0cfac8931b3ebec3fb6aec9636e33271', 1, 'user', '2021-04-26 14:33:33', '2021-04-26 14:37:24');

SET FOREIGN_KEY_CHECKS = 1;
